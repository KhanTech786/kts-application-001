name: 'KTS Deploy Pipeline'

on:
  push:
    branches:
    - master
  pull_request:

permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
      pull-requests: write

jobs:
  Terragrunt:
    name: 'Terragrunt'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: 'us-east-1'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash


    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.DEV_AWS_ROLE }}
        aws-region: us-east-1
        role-session-name: GitHub-OIDC-TERRAFORM

    # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
    - name: Setup Terraform v1.2.6
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: 1.2.6
        terraform_wrapper: true
    - name: Setup Terraform version
      run: terraform --version
    - name: Setup Terraform wrapper path
      run: which terraform

    - name: Setup Terragrunt v0.38.4
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.38.4/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Deploy In Dev East
      working-directory: live/dev/us-east-1/infra/
      run: |
        cd live/dev/us-east-1/infra/
        terragrunt init
        terragrunt apply -auto-approve

      # On push to main, build or change infrastructure according to Terragrunt configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terragrunt Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terragrunt Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terragrunt run-all apply --terragrunt-non-interactive
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.TF_ACCESS_KEY_PROD }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_SECRET_PROD }}